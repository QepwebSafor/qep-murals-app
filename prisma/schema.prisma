generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model questions {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  email Json?  @unique(map: "email_1")
}

model tasks {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  title Json?  @unique(map: "title_1")
}

model topics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  createdAt   DateTime @db.Date
  description String
  title       String
  updatedAt   DateTime @db.Date
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  accounts       Account[]
  comments       Comment[]
  listings       Listing[]
}

model Contact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postername String
  message    String
  email      String
  topic      String
  createdAt  DateTime @default(now())
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  createdAt   DateTime @default(now())
  userEmail   String
  description String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  likedIds    String[] @db.ObjectId
}

model Todo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String?
  completed Boolean  @default(false)
  user_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  createdAt DateTime @default(now())
  imageSrc String
  description String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  likedIds String[]  @db.ObjectId
}